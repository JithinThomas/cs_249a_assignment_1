#include "gtest/gtest.h"
#include "fwk/fwk.h"
#include "MalwareStrength.h"
#include "Port.h"
#include "Device.h"
#include "System.h"

TEST(Device, defaultHealth) {
    const auto device = PersonalDevice::instanceNew("device-1");
    ASSERT_TRUE(device->health() == "healthy");
}

TEST(Device, healthIs) {
    const auto device = PersonalDevice::instanceNew("device-1");
    device->healthIs("infected");
    ASSERT_TRUE(device->health() == "infected");
}

// ============================================================
//  Public methods of System class
// ============================================================
TEST(Network, networkNew) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "abcd";
	auto n = sys->network(networkName);
	ASSERT_TRUE(n == null);

	sys->networkNew(networkName);
	n = sys->network(networkName);
	ASSERT_TRUE(n != null);
	ASSERT_TRUE(n->name() == networkName);
}

TEST(Network, personalNew) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "network-1";
	auto deviceName = "personal-1-1";
	auto network = sys->networkNew(networkName);
	auto device = network->device(deviceName);
	ASSERT_TRUE(device == null);

	sys->personalNew(networkName, deviceName);
	device = network->device(deviceName);

	ASSERT_TRUE(device != null);
	ASSERT_TRUE(device->name() == deviceName);
	ASSERT_TRUE(device->health() == "healthy");
	ASSERT_TRUE(isPersonalDevice(device));
}

TEST(Network, firewallNew) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "network-1";
	auto deviceName = "firewall-1";
	auto network = sys->networkNew(networkName);
	auto device = network->device(deviceName);
	ASSERT_TRUE(device == null);

	sys->firewallNew(networkName, deviceName);
	device = network->device(deviceName);

	ASSERT_TRUE(device != null);
	ASSERT_TRUE(device->name() == deviceName);
	ASSERT_TRUE(device->health() == "healthy");
	ASSERT_TRUE(isFirewallDevice(device));
}

TEST(Device, connectionIs) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "abcd";
	auto device1Name = "device-4";
	auto device2Name = "device-7";
	sys->networkNew(networkName);
	auto device1 = sys->personalNew(networkName, device1Name);
	auto device2 = sys->firewallNew(networkName, device2Name);
	auto p1 = 3;
	auto p2 = 11;

	ASSERT_TRUE(device1->availablePort(p1));
	ASSERT_TRUE(device2->availablePort(p2));

	sys->connectionIs(networkName, device1Name, p1, device2Name, p2);

	auto port1 = device1->port(p1);
	auto port2 = device2->port(p2);

	ASSERT_FALSE(device1->availablePort(p1));
	ASSERT_FALSE(device2->availablePort(p2));	
	ASSERT_TRUE(port1.otherDevice() == device2);
	ASSERT_TRUE(port1.otherPort() == p2);
	ASSERT_TRUE(port2.otherDevice() == device1);
	ASSERT_TRUE(port2.otherPort() == p1);
}

TEST(Network, infectedDel) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "abcd";
	auto device1Name = "device-3";
	auto device2Name = "device-9";
	auto p1 = 0;
	auto p2 = 5;
	auto network = sys->networkNew(networkName);
	auto device1 = sys->personalNew(networkName, device1Name);
	auto device2 = sys->firewallNew(networkName, device2Name);

	sys->connectionIs(networkName, device1Name, p1, device2Name, p2);
	device2->healthIs("infected");
	sys->infectedDel(networkName);
	ASSERT_TRUE(network->device(device1Name) != null);
	ASSERT_TRUE(network->device(device1Name)->availablePort(p1));
	ASSERT_TRUE(network->device(device2Name) == null);
}

TEST(Device, clone) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "abcd";
	auto device1Name = "device-4";
	auto clone1Name = "device-4-clone";
	auto network = sys->networkNew(networkName);
	auto device1 = sys->personalNew(networkName, device1Name);
	auto p1 = 6;
	auto p2 = 0;
	
	ASSERT_TRUE(network->device(clone1Name) == null);

	// Test the clone method on a PersonalDevice
	device1->healthIs("infected");
	device1->portRatingIs(p1, 0.8);
	sys->clone(networkName, device1Name, p1, clone1Name, p2);
	auto clone1 = network->device(clone1Name);

	ASSERT_TRUE(clone1 != null);
	ASSERT_TRUE(isPersonalDevice(clone1));
	ASSERT_TRUE(clone1->health() == "infected");
	ASSERT_TRUE(clone1->port(p2).otherDevice() == device1);
	ASSERT_TRUE(clone1->port(p2).otherPort() == p1);
	for (auto i = 0; i < clone1->portCount(); i++) { // verify that the ratings of all ports have been copied correctly
		ASSERT_TRUE(clone1->port(i).rating() == device1->port(i).rating());
	}
	
	// Test the clone method on a FirewallDevice
	auto device2Name = "device-7";
	auto device2 = sys->firewallNew(networkName, device2Name);
	auto clone2Name = "device-7-clone";
	sys->clone(networkName, device2Name, p1, clone2Name, p2);
	auto clone2 = network->device(clone2Name);

	ASSERT_TRUE(isFirewallDevice(clone2));
}

TEST(Network, cloneAll_1) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "abcd";
	auto device1Name = "device-a";
	auto device2Name = "device-b";
	auto clone1Name = "device-a-4";
	auto clone2Name = "device-b-4";
	auto p1 = 2;
	auto p2 = 3;
	auto p3 = 4;
	auto p4 = 5;

	auto network = sys->networkNew(networkName);
	auto device1 = sys->personalNew(networkName, device1Name);	
	auto device2 = sys->personalNew(networkName, device2Name);
	sys->connectionIs(networkName, device1Name, p1, device2Name, p2);
	sys->cloneAll(networkName, p3, p4);

	auto clone1 = network->device(clone1Name);
	auto clone2 = network->device(clone2Name);

	// Check original device connections
	ASSERT_TRUE(device1->port(p1).otherDevice() == device2);
	ASSERT_TRUE(device1->port(p1).otherPort() == p2);

	// Check connections between cloned devices and their parent devices
	ASSERT_TRUE(clone1->port(p4).otherDevice() == device1);
	ASSERT_TRUE(clone1->port(p4).otherPort() == p3);
	ASSERT_TRUE(clone1->port(p1).otherDevice() == clone2);
	ASSERT_TRUE(clone1->port(p1).otherPort() == p2);

	// Check connections among the cloned devices
	ASSERT_TRUE(clone2->port(p4).otherDevice() == device2);
	ASSERT_TRUE(clone2->port(p4).otherPort() == p3);
	ASSERT_TRUE(clone2->port(p2).otherDevice() == clone1);
	ASSERT_TRUE(clone2->port(p2).otherPort() == p1);
}

// This is to verify that the connections between clones and their parent devices
// are given more priority than connections among clones.
TEST(Network, cloneAll_2) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "abcd";
	auto device1Name = "device-a";
	auto device2Name = "device-b";
	auto clone1Name = "device-a-3";
	auto clone2Name = "device-b-3";
	auto p1 = 2;
	auto p2 = 3;

	auto network = sys->networkNew(networkName);
	auto device1 = sys->personalNew(networkName, device1Name);	
	auto device2 = sys->personalNew(networkName, device2Name);
	sys->connectionIs(networkName, device1Name, p1, device2Name, p1);
	sys->cloneAll(networkName, p2, p1);

	ASSERT_TRUE(device1->port(p1).otherDevice() == device2);
	ASSERT_TRUE(device1->port(p1).otherPort() == p1);

	auto clone1 = network->device(clone1Name);
	auto clone2 = network->device(clone2Name);

	ASSERT_TRUE(clone1->port(p1).otherDevice() == device1);
	ASSERT_TRUE(clone1->port(p1).otherPort() == p2);

	ASSERT_TRUE(clone2->port(p1).otherDevice() == device2);
	ASSERT_TRUE(clone2->port(p1).otherPort() == p2);
}

TEST(Device, ratingIs) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "network-1";
	auto deviceName = "personal-1";
	auto network = sys->networkNew(networkName);
	auto device = sys->personalNew(networkName, deviceName);
	auto p1 = 5;
	auto p2 = 1;
	ASSERT_TRUE(device->port(p1).rating() == 0);
	ASSERT_TRUE(device->port(p2).rating() == 0);

	auto newRating = 0.4;
	sys->ratingIs(networkName, deviceName, p1, newRating);

	ASSERT_TRUE(device->port(p1).rating() == newRating);
	ASSERT_TRUE(device->port(p2).rating() == 0);
}

// ============================================================

// ============================================================
// Tests for helper functions
// ============================================================

TEST(Helper, computeOriginOfAttack) {
	const auto sys = System::instanceNew("system-1");
	auto networkName = "abcd";
	auto device1Name = "device-1";
	auto device2Name = "device-2";
	auto device3Name = "device-3";
	auto device4Name = "device-4";
	auto network = sys->networkNew(networkName);
	auto device1 = sys->personalNew(networkName, device1Name);
	auto device2 = sys->firewallNew(networkName, device2Name);
	auto device3 = sys->firewallNew(networkName, device3Name);
	auto device4 = sys->firewallNew(networkName, device4Name);

	sys->connectionIs(networkName, device1Name, 0, device2Name, 1);
	sys->connectionIs(networkName, device2Name, 2, device3Name, 3);
	sys->connectionIs(networkName, device3Name, 4, device4Name, 5);

	vector<U32> ports;
	ports.push_back(0);
	ports.push_back(2);
	ports.push_back(4);
	ports.push_back(6);
	
	auto origin = sys->computeOriginOfAttack(device1, ports);

	ASSERT_TRUE(std::get<0>(origin) == device4);
	ASSERT_TRUE(std::get<1>(origin) == 6);
}

TEST(Helper, isPersonalDevice) {
	auto deviceName = "device-1";
	auto device1 = PersonalDevice::instanceNew(deviceName);
	ASSERT_TRUE(isPersonalDevice(device1));
	auto device2 = FirewallDevice::instanceNew(deviceName);
	ASSERT_FALSE(isPersonalDevice(device2));
}

TEST(Helper, isFirewallDevice) {
	auto deviceName = "device-1";
	auto device1 = FirewallDevice::instanceNew(deviceName);
	ASSERT_TRUE(isFirewallDevice(device1));
	auto device2 = PersonalDevice::instanceNew(deviceName);
	ASSERT_FALSE(isFirewallDevice(device2));
}

// ============================================================
