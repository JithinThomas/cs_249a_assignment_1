//
// Stub for main program for Malware Simulation problem.
//
// Copy this file to main.cxx and then edit it to implement your solution.
//

#include "fwk/fwk.h"

#include "MalwareStrength.h"
#include "Port.h"
#include "Device.h"
#include "Network.h"
#include "Commands.h"

#include <iostream>
#include <fstream>
#include <sstream>
#include <queue>
#include <regex>
#include <unordered_map>
#include <utility>
#include <vector>

using std::cin;
using std::cout;
using std::endl;
using std::istream;
using std::ifstream;
using std::ostream;
using std::stringstream;

using std::queue;
using std::unordered_map;
using std::vector;

using std::to_string;

using std::make_pair;
using std::pair;
using std::regex;
using std::regex_match;
using std::smatch;

using fwk::Ptr;

//
// Class for main simulation logic.
//
class MalwareSim : public fwk::PtrInterface {
public:

    static Ptr<MalwareSim> instanceNew() {
        return new MalwareSim();
    }


    //
    // Read data in, parse it, excute commands.
    //
    void evalStream(istream& input) {
        string line;
        while(getline(input, line)) {
            //cout << "IsEmpty?: " << line.empty() << endl;
            auto typeAndParams = commandTypeAndParams(line);
            cout << "[" << typeAndParams.first << "]: " << line << endl;
        }
    }

    static regex regexNetworkNew;
    static regex regexPersonalNew;
    static regex regexFirewallNew;
    static regex regexConnectionIs;
    static regex regexInfectionIs;
    static regex regexInfectedDel;
    static regex regexClone;
    static regex regexCloneAll;
    static regex regexRatingIs;

private:
    /**
        Creates new network named 'networkName' if one does not already exist.
        Error checks:
            (i) If a network with the same name already exists, display a warning and exit
            (ii) The network's name cannot be 'networkNew'. Also, it should not contain whitespace or quotes
    */
    void networkNew(const string&  networkName) {
        
    }

    // Parse the command, find its type and return a tuple of <CommandType, regex match object>
    pair<CommandType, smatch> commandTypeAndParams(const string& command) {
        smatch baseMatch;

        if (command.empty() || (command[0] == '#')) {
            return make_pair(NOP, baseMatch);
        } else if (regex_match(command, baseMatch, regexNetworkNew)) {
            return make_pair(NETWORK_NEW, baseMatch);
        } else if (regex_match(command, baseMatch, regexPersonalNew)) {
            return make_pair(PERSONAL_NEW, baseMatch);
        } else if (regex_match(command, baseMatch, regexFirewallNew)) {
            return make_pair(FIREWALL_NEW, baseMatch);
        } else if (regex_match(command, baseMatch, regexConnectionIs)) {
            return make_pair(CONNECTION_IS, baseMatch);
        } else if (regex_match(command, baseMatch, regexInfectionIs)) {
            return make_pair(INFECTION_IS, baseMatch);
        } else if (regex_match(command, baseMatch, regexInfectedDel)) {
            return make_pair(INFECTED_DEL, baseMatch);
        } else if (regex_match(command, baseMatch, regexClone)) {
            return make_pair(CLONE, baseMatch);
        } else if (regex_match(command, baseMatch, regexCloneAll)) {
            return make_pair(CLONE_ALL, baseMatch);
        } else if (regex_match(command, baseMatch, regexRatingIs)) {
            return make_pair(RATING_IS, baseMatch);
        }

        return make_pair(INVALID_COMMAND, baseMatch);
    }

    MalwareSim() {
        // Nothing else to do.
    }

    ~MalwareSim() {
        // Nothing to do.
    }

};

// Initialize all the regexes used to parse and identify the type of a given command
regex MalwareSim::regexNetworkNew = regex("Network networkNew (.*)");
regex MalwareSim::regexPersonalNew = regex("Network (.*) personalNew (.*)");
regex MalwareSim::regexFirewallNew = regex("Network (.*) firewallNew (.*)");
regex MalwareSim::regexConnectionIs = regex("Device (.*) (.*) (.*) connectionIs (.*) (.*)");
regex MalwareSim::regexInfectionIs = regex("Network (.*) infectionIs (.*) device1 (.*) [ports...]"); // TODO: Fix this regex
regex MalwareSim::regexInfectedDel = regex("Network (.*) infectedDel");
regex MalwareSim::regexClone = regex("Device (.*) (.*) (.*) clone (.*) (.*)");
regex MalwareSim::regexCloneAll = regex("Network (.*) cloneAll (.*) (.*)");
regex MalwareSim::regexRatingIs = regex("Device (.*) (.*) (.*) ratingIs (.*)");

//
// The main program takes one argument, which is the file name with the rules.
// The rules are then executed and the appropriate statistics are printed
// to the console.
//
int main(int argc, const char* argv[]) {
    if (argc <= 1) {
        cout << "Missing input file" << endl;
        return 1;
    }

    if (argc > 2) {
        cout << "Extraneous arguments after input file" << endl;
        return 1;
    }

    string arg = argv[1];

    const auto sim = MalwareSim::instanceNew();

    if (arg == "-") {
        sim->evalStream(cin);
    } else {
        ifstream input(arg);
        if (input.good()) {
            sim->evalStream(input);
        } else {
            cout << "Error opening " << arg << endl;
        }
    }

    return 0;
}
